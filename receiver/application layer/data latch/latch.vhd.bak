-- Pieter-Jan Steeman

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.std_logic_unsigned.ALL;

ENTITY latch IS
	PORT (
		clk        : IN  std_logic;						-- klok
		clk_en     : IN  std_logic;						-- klok enable om kloksnelheid te vertragen
		rst        : IN  std_logic;						-- reset
		bit_sample : IN  std_logic;						-- wanneer men mag sampelen
		pre	   : IN  std_logic_vector(6 DOWNTO 0);		-- preamble waarde
		latch_in   : IN  std_logic_vector(3 DOWNTO 0); 	-- data in
		latch_out  : OUT std_logic_vector(3 DOWNTO 0) 	-- data out
    );
END latch;

ARCHITECTURE behavior OF latch IS
	SIGNAL pres_latch: std_logic_vector(3 DOWNTO 0) := (OTHERS => '0');
	SIGNAL next_latch: std_logic_vector(3 DOWNTO 0) := (OTHERS => '0');
	CONSTANT preamble: std_logic_vector(6 DOWNTO 0) := "0111110";
BEGIN

latch_out <= pres_latch;

syn_latch : PROCESS (clk)												-- synchroon deel latch
BEGIN																	-- bepaald wanneer de data juist staat op basis van de preamble
	IF (rising_edge(clk) AND clk_en = '1' AND bit_sample = '1') THEN
		IF (rst = '1') THEN 
			pres_latch <= (OTHERS => '0');
		ELSE 
			pres_latch <= next_latch;
		END IF;
	END IF;
END PROCESS syn_latch;

com_latch : PROCESS(pre, latch_in, pres_latch)							-- asynchroon deel latch
BEGIN
	IF (pre = preamble) THEN
		next_latch <= latch_in;
	ELSE
		next_latch <= pres_latch;
	END IF;
END PROCESS com_latch;
END behavior;
